#!/bin/sh

# check if CDB_ENV_SUBDOMAIN is set in cdb-deployment/custom/env/cdb-env-vars
if [ ! -n "$CDB_ENV_SUBDOMAIN" ]; then
    echo "CDB_ENV_SUBDOMAIN variable not set in cdb-deployment/custom/env/cdb-env-vars"
    exit 1
fi

echo
echo "==============================================="
echo
echo "NOTE! ThIS SCRIPT ONLY NEEDS TO BE RUN ON ONE OF THE CDB/TRAVELER AWS HOSTS, IT WILL GENERATE A CERTIFICATE"
echo "FOR ALL OF THEM AS LONG AS THEY SUBDOMAIN IS ADDED TO THE CERTBOT COMMAND, BELOW."
echo
echo "The certbot tool will prompt you to enter DNS TXT records for acme-challenge domains"
echo "for the purpose of verifying ownership.  Use the fastmail tool to create the DNS text records."
echo "After creating and saving the DNS records, use the google tool to verify they have been published"
echo "before continuing the final certbot prompt."
echo "***** https://www.fastmail.com/settings/domains/646065/dns?u=096940ef"
echo "***** https://toolbox.googleapps.com/apps/dig/#TXT/_acme-challenge.traveler-demo.ospreydcs.com"
echo "==============================================="
echo

# uncomment command below to generate for single subdomain only
#CERTBOTCMD="cd ~/cdb-deployment/var/letsencrypt && certbot certonly --manual --preferred-challenges=dns --email cmcchesney@ospreydcs.com --agree-tos --config-dir ./config --logs-dir ./logs --work-dir ./workdir -d *.ospreydcs.com -d *.$CDB_ENV_SUBDOMAIN.ospreydcs.com"

# uncomment command below to generate for all subdomains
CERTBOTCMD="cd ~/cdb-deployment/var/letsencrypt && certbot certonly --manual --preferred-challenges=dns --email cmcchesney@ospreydcs.com --agree-tos --config-dir ./config --logs-dir ./logs --work-dir ./workdir -d *.ospreydcs.com -d *.cdb-demo.ospreydcs.com -d *.mpex.ospreydcs.com -d *.alsu.ospreydcs.com"

echo $CERTBOTCMD
echo

# require user to confirm by hitting enter before continuing
read -p "Hit enter to run certbot command shown above for subdomain: $CDB_ENV_SUBDOMAIN"

# create letsencrypt directory if it doesn't exist
if [ ! -d ~/cdb-deployment/var/letsencrypt ]; then
    echo "creating ~/cdb-deployment/var/letsencrypt"
    mkdir -p ~/cdb-deployment/var/letsencrypt || { echo "failed to create ~/cdb-deployment/var/letsencrypt"; exit 1; }
fi

# run certbot in ~/letsencrypt directory
eval $CERTBOTCMD

#cd ~/cdb-deployment/var/letsencrypt && sudo certbot certonly --manual --preferred-challenges=dns --email cmcchesney@ospreydcs.com --agree-tos --config-dir ./config --logs-dir ./logs --work-dir ./workdir -d *.ospreydcs.com -d *."$CDB_ENV_SUBDOMAIN".ospreydcs.com

echo "Perform the following steps after generating cert:"
echo "* cp /home/cdb/cdb-deployment/var/letsencrypt/config/live/ospreydcs.com/*.pem /home/cdb/cdb-deployment/config/cdb/etc/CA/certs/ospreydcs.com"
echo "* (as centos user, of add sudo to cdb user) sudo systemctl restart nginx"
echo "* cd /opt/cdb/current"
echo "* source setup.sh
echo "* env | grep CDB_ENV_PASSWD_MYSQL_ROOT"
echo "*** get mysql root password, needed to use for payara master password in next step"
echo "* ./sbin/cdb_update_glassfish_ssl.sh /opt/cdb/etc/CA/certs/ospreydcs.com/privkey.pem /opt/cdb/etc/CA/certs/ospreydcs.com/fullchain.pem"
echo "* The following steps are necessary if the cert filenames changed:"
echo "***** edit /opt/traveler/etc/traveler-config/app.json to use correct cert filenames"
echo "***** edit /opt/traveler/etc/traveler-config/api.json to use correct cert filenames"
echo "* ~/cdb-support/bin/ecosystem-stop"
echo "* ~/cdb-support/bin/ecosystem-start"
echo "* Test cdb access https://cdb.cdb-demo.ospreydcs.com"
echo "* Test traveler access https://traveler.cdb-demo.ospreydcs.com"

